Example	Name	Result
$a and $b	And	true if both $a and $b are true.
$a or $b	Or	true if either $a or $b is true.
$a xor $b	Xor	true if either $a or $b is true, but not both.
! $a	Not	true if $a is not true.
$a && $b	And	true if both $a and $b are true.
$a || $b	Or	true if either $a or $b is true.
The two different variations of "and" and "or" operators operate at different precedences.

Logical operators illustrated

foo() will never get called as those operators are short-circuit

Copy
<?php
$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());
?>
"||" has a greater precedence than "or"

The result of the expression (false || true) is assigned to $e Acts like: ($e = (false || true))

Copy
<?php
$e = false || true;
var_dump($e);
?>
Result


The constant false is assigned to $f before the "or" operation occurs

Acts like: (($f = false) or true)

Copy
<?php
$f = false or true;
var_dump($f);
?>
Result


"&&" has a greater precedence than "and"

The result of the expression (true && false) is assigned to $g

Acts like: ($g = (true && false))

Copy
<?php
$g = true && false;
var_dump($g);
?>
Result


The constant true is assigned to $h before the "and" operation occurs

Acts like: (($h = true) and false)

Copy
<?php
$h = true and false;
var_dump($h);
?>
Result
