PHP supports the variable-length argument lists by using the ... token.

Argument lists with the ... token marks that the function accepts a variable number of arguments.

The arguments will be passed into the given variable as an array; for example:

Using ... to access variable arguments

Copy
<?php
function sum(...$numbers) {
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}

echo sum(1, 2, 3, 4);
?>



... can also be used when calling functions to unpack an array or Traversable variable or literal into the argument list:

Using ... to provide arguments

Copy
<?php
function add($a, $b) {
    return $a + $b;
}

echo add(...[1, 2])."\n";

$a = [1, 2];
echo add(...$a);
?>



You may specify normal positional arguments before the ... token.

In this case, only the trailing arguments that don't match a positional argument will be added to the array generated by ....

It is also possible to add a type declaration before the ... token.

Type declared variable arguments

Copy
<?php
function total_intervals($unit, DateInterval ...$intervals) {
    $time = 0;
    foreach ($intervals as $interval) {
        $time += $interval->$unit;
    }
    return $time;
}

$a = new DateInterval('P1D');
$b = new DateInterval('P2D');
echo total_intervals('d', $a, $b).' days';

// This will fail, since null isn't a DateInterval object.
echo total_intervals('d', null);
?>


Finally, variable arguments can also be passed by reference by prefixing the ... with an ampersand (&).
