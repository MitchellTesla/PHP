Arrow functions has a more concise syntax for anonymous functions.

Both anonymous functions and arrow functions are implemented using the Closure class.

Arrow functions have the basic form

Copy
fn(argument_list) => expr.



Arrow functions support the same features as anonymous functions, except that using variables from the parent scope is always automatic.

When a variable used in the expression is defined in the parent scope it will be implicitly captured by-value.

In the following example, the functions $fn1 and $fn2 behave the same way.

Arrow functions capture variables by value automatically

Copy
<?php
$y = 1;

$fn1 = fn($x) => $x + $y;
// equivalent to using $y by value:
$fn2 = function ($x) use ($y) {
    return $x + $y;
};

var_export($fn1(3));
?>



Arrow functions capture variables by value automatically, even when nested

Copy
<?php

$z = 1;
$fn = fn($x) => fn($y) => $x * $y + $z;
// Outputs 51
var_export($fn(5)(10));
?>



The arrow function syntax allows function signatures, including
parameter and
return types,
default values,
variadic,
by-reference passing and
returning.



All of the following are valid examples of arrow functions:

Copy
<?php

fn(array $x) => $x;
static fn(): int => $x;
fn($x = 42) => $x;
fn(&$x) => $x;
fn&($x) => $x;
fn($x, ...$rest) => $rest;

?>
