PHP supports the named arguments as an extension of the existing positional parameters.

Named arguments allow passing arguments to a function based on the parameter name, rather than the parameter position.

Named arguments are passed by prefixing the value with the parameter name followed by a colon.

Using reserved keywords as parameter names is allowed.

The parameter name must be an identifier.

Named argument syntax

Copy
<?php
myFunction(paramName: $value);
array_foobar(array: $value);

// NOT supported.
function_name($variableStoringParamName: $value);
?>
Positional arguments versus named arguments

Copy
<?php
// Using positional arguments:
array_fill(0, 100, 50);

// Using named arguments:
array_fill(start_index: 0, count: 100, value: 50);
?>


The order in which the named arguments are passed does not matter.

Same example as above with a different order of parameters

Copy
<?php
array_fill(value: 50, num: 100, start_index: 0);
?>



Named arguments can be combined with positional arguments.

In this case, the named arguments must come after the positional arguments.

We can specify only some of the optional arguments of a function, regardless of their order.

Combining named arguments with positional arguments

Copy
<?php
htmlspecialchars($string, double_encode: false);
// Same as
htmlspecialchars($string, ENT_COMPAT | ENT_HTML401, 'UTF-8', false);
?>
