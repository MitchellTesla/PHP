The foreach statement provides an easy way to iterate over arrays.

foreach works only on arrays and objects, and will issue an error when you try to use it on a variable with a different data type.

There are two syntaxes:

Copy
foreach (iterable_expression as $value){
    statement
}
foreach (iterable_expression as $key => $value){
    statement
}
Result


The first form traverses the iterable given by iterable_expression. On each iteration, the value of the current element is assigned to $value.

The second form will additionally assign the current element's key to the $key variable on each iteration.

It is possible to customize object iteration.

In order to be able to directly modify array elements within the loop precede $value with &.

In that case the value will be assigned by reference.

Copy
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
print_r($arr);
// $arr is now array(2, 4, 6, 8)
unset($value); // break the reference with the last element
?>
Result


Reference of a $value and the last array element remain even after the foreach loop.

It is recommended to destroy it by unset().

Otherwise you will experience the following behavior:

Copy
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
print_r($arr);
// $arr is now array(2, 4, 6, 8)

// without an unset($value), 
// $value is still a reference to the last item: $arr[3]

foreach ($arr as $key => $value) {
    // $arr[3] will be updated with each value from $arr...
    echo "{$key} => {$value} ";
    print_r($arr);
}
?>
Result


It is possible to iterate a constant array's value by reference:

Copy
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}
?>
