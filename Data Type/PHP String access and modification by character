Characters within strings may be accessed and modified via the zero-based index.

For example $str[42].

A PHP string is like an array of characters.

The functions substr() and substr_replace() can be used when you want to extract or replace more than 1 character.

PHP supports negative string offsets.

These specify the offset from the end of the string.

Internally, PHP strings are byte arrays.

Accessing or modifying a string using array brackets is not multi-byte safe, and should only be done with strings that are in a single-byte encoding such as ISO-8859-1.

Applying the empty index operator on an empty string throws a fatal error.

Example
Some string examples

Copy
<?php
// Get the first character of a string
$str = 'This is a test.';
$first = $str[0];
var_dump($first);

// Get the third character of a string
$third = $str[2];
var_dump($third);

// Get the last character of a string.
$str = 'This is still a test.';
$last = $str[strlen($str)-1];
var_dump($last);

// Modify the last character of a string
$str = 'This is a test';
$str[strlen($str)-1] = 'e';
var_dump($str);
?>
Result


String offsets have to either be integers or integer-like strings, otherwise a warning will be thrown.

Copy
<?php
$str = 'abc';

var_dump($str['1']);
var_dump(isset($str['1']));

?>
