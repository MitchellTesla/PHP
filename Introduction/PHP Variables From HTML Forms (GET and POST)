When a form is submitted to a PHP script, the information from that form is automatically made available to the script.

There are few ways to access this information, for example:

A simple HTML form

Copy
<form action="foo.php" method="post">
    Name:  <input type="text" name="username" /><br />
    Email: <input type="text" name="email" /><br />
    <input type="submit" name="submit" value="Submit me!" />
</form>
There are only two ways to access data from your HTML forms.

Accessing data from a simple POST HTML form

Copy
<?php
echo $_POST['username'];
echo $_REQUEST['username'];
?>
Using a GET form is similar except you'll use the appropriate GET predefined variable instead.

GET also applies to the QUERY_STRING (the information after the '?' in a URL).

So, for example, http://www.example.com/test.php?id=3 contains GET data which is accessible with $_GET['id'].

Dots and spaces in variable names are converted to underscores.

For example <input name="a.b" /> becomes $_REQUEST["a_b"].

PHP also understands arrays in the context of form variables.

You may, for example, group related variables together, or use this feature to retrieve values from a multiple select input.

For example, let's post a form to itself and upon submission display the data:

More complex form variables

Copy
<?php
if ($_POST) {
    echo '<pre>';
    echo htmlspecialchars(print_r($_POST, true));
    echo '</pre>';
}
?>
<form action="" method="post">
    Name:  <input type="text" name="personal[name]" /><br />
    Email: <input type="text" name="personal[email]" /><br />
    Beer: <br />
    <select multiple name="beer[]">
        <option value="a">A</option>
        <option value="b">B</option>
        <option value="c">C</option>
    </select><br />
    <input type="submit" value="submit me!" />
</form>
Result


Note: If an external variable name begins with a valid array syntax, trailing characters are silently ignored.

For example,

Copy
<input name="foo[bar]baz">
becomes.

Copy
$_REQUEST['foo']['bar'].
